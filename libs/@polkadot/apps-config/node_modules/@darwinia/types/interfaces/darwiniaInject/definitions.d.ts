declare const _default: {
    types: {
        BalanceInfo: {};
        BalanceLock: {
            id: string;
            lockFor: string;
            reasons: string;
        };
        LockFor: {
            _enum: {
                Common: string;
                Staking: string;
            };
        };
        Common: {
            amount: string;
        };
        StakingLock: {
            stakingAmount: string;
            unbondings: string;
        };
        Unbonding: {
            amount: string;
            until: string;
        };
        AccountData: {
            free: string;
            reserved: string;
            freeKton: string;
            reservedKton: string;
        };
        RingBalance: string;
        KtonBalance: string;
        TsInMs: string;
        Power: string;
        DepositId: string;
        StakingBalanceT: {
            _enum: {
                RingBalance: string;
                KtonBalance: string;
            };
        };
        StakingLedgerT: {
            stash: string;
            active: string;
            activeDepositRing: string;
            activeKton: string;
            depositItems: string;
            ringStakingLock: string;
            ktonStakingLock: string;
            claimedRewards: string;
        };
        TimeDepositItem: {
            value: string;
            startTime: string;
            expireTime: string;
        };
        ExposureT: {
            ownRingBalance: string;
            ownKtonBalance: string;
            ownPower: string;
            totalPower: string;
            others: string;
        };
        Exposure: string;
        IndividualExposure: {
            who: string;
            ringBalance: string;
            ktonBalance: string;
            power: string;
        };
        ElectionResultT: {
            electedStashes: string;
            exposures: string;
            compute: string;
        };
        RKT: {
            r: string;
            k: string;
        };
        SpanRecord: {
            slashed: string;
            paidOut: string;
        };
        UnappliedSlash: {
            validator: string;
            own: string;
            others: string;
            reporters: string;
            payout: string;
        };
        MappedRing: string;
        EthereumTransactionIndex: string;
        EthereumBlockNumber: string;
        EthereumHeader: {
            parentHash: string;
            timestamp: string;
            number: string;
            author: string;
            transactionsRoot: string;
            unclesHash: string;
            extraData: string;
            stateRoot: string;
            receiptsRoot: string;
            logBloom: string;
            gasUsed: string;
            gasLimit: string;
            difficulty: string;
            seal: string;
            baseFeePerGas: string;
            blockHash: string;
        };
        Bloom: string;
        EthashProof: {
            dagNodes: string;
            proof: string;
        };
        EthereumReceipt: {
            Legacy: string;
            AccessList: string;
            EIP1559Transaction: string;
        };
        LegacyReceipt: {
            gasUsed: string;
            logBloom: string;
            logs: string;
            outcome: string;
        };
        LogEntry: {};
        TransactionOutcome: {};
        EthereumNetwork: {
            _enum: {
                Mainnet: null;
                Ropsten: null;
            };
        };
        RedeemFor: {
            _enum: {
                Token: null;
                Deposit: null;
            };
        };
        EthereumReceiptProof: {
            index: string;
            proof: string;
            headerHash: string;
        };
        EthereumReceiptProofThing: string;
        MMRProof: {
            memberLeafIndex: string;
            lastLeafIndex: string;
            proof: string;
        };
        EthereumRelayHeaderParcel: {
            header: string;
            parentMmrRoot: string;
        };
        EthereumRelayProofs: {
            ethashProof: string;
            mmrProof: string;
        };
        OtherSignature: {
            _enum: {
                Eth: string;
                Tron: string;
            };
        };
        EcdsaSignature: string;
        TronAddress: string;
        OtherAddress: {
            _enum: {
                Eth: string;
                Tron: string;
            };
        };
        AddressT: string;
        MerkleMountainRangeRootLog: {
            prefix: string;
            ParentMmrRoot: string;
        };
        ChainProperties: {
            ss58Format: string;
            tokenDecimals: string;
            tokenSymbol: string;
        };
        AccountInfo: {
            nonce: string;
            refcount: string;
            data: string;
        };
        Signer: string;
        RelayAuthorityT: {
            accountId: string;
            signer: string;
            stake: string;
            term: string;
        };
        MMRRoot: string;
        EcdsaAddress: string;
        EcdsaMessage: string;
        RelayAuthoritySigner: string;
        RelayAuthorityMessage: string;
        RelayAuthoritySignature: string;
        Term: string;
        OpCode: string;
        ScheduledAuthoritiesChangeT: {
            nextAuthorities: string;
            deadline: string;
        };
        MmrRootToSign: {
            mmrRoot: string;
            signatures: string;
        };
        ElectionCompute: {
            _enum: string[];
        };
        ValidatorPrefs: string;
        Relayer: {
            id: string;
            collateral: string;
            fee: string;
        };
        PriorRelayer: {
            id: string;
            fee: string;
            validRange: string;
        };
        TokenMessageId: string;
        TokenMetadata: {
            tokenType: string;
            address: string;
            name: string;
            symbol: string;
            decimal: string;
        };
        Order: {
            lane: string;
            message: string;
            sentTime: string;
            confirmTime: string;
            lockedCollateral: string;
            assignedRelayers: string;
        };
    };
    rpc: {};
};
export default _default;
