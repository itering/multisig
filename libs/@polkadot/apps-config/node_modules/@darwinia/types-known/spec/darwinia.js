"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Copyright 2017-2020 @polkadot/types-known authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/* eslint-disable sort-keys */
const sharedTypes = {};
const versioned = [{
  minmax: [0, 22],
  types: _objectSpread({}, sharedTypes)
}, {
  minmax: [23, 24],
  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
    AccountInfo: 'AccountInfoWithTripleRefCount',
    AccountInfoWithTripleRefCount: {
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      data: 'AccountData'
    }
  })
}, {
  minmax: [25, 1150],
  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
    AccountInfo: 'AccountInfoWithTripleRefCount',
    AccountInfoWithTripleRefCount: {
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      sufficients: 'RefCount',
      data: 'AccountData'
    },
    Address: 'MultiAddress',
    LookupSource: 'MultiAddress',
    MultiAddress: 'GenericMultiAddress',
    AccountData: {
      feeFrozen: 'Balance',
      free: 'Balance',
      reserved: 'Balance',
      freeKton: 'Balance',
      reservedKton: 'Balance',
      miscFrozen: 'Balance'
    },
    BalanceInfo: '{}',
    BalanceLock: {
      id: 'LockIdentifier',
      lockFor: 'LockFor',
      reasons: 'Reasons'
    },
    EcdsaMessage: 'H256',
    EthashProof: {
      dagNodes: '(H512, H512)',
      proof: 'Vec<H128>'
    },
    EthereumReceipt: {
      gasUsed: 'U256',
      logBloom: 'Bloom',
      logs: 'Vec<LogEntry>',
      outcome: 'TransactionOutcome'
    },
    Order: {
      lane: 'LaneId',
      message: 'MessageNonce',
      sent_time: 'BlockNumber',
      confirm_time: 'BlockNumber',
      assigned_relayers: 'Vec<PriorRelayer>'
    },
    RelayAffirmationId: {
      relayHeaderId: 'EthereumBlockNumber',
      round: 'u32',
      index: 'u32'
    },
    RelayAuthorityT: {
      accountId: 'AccountId',
      signer: 'EthereumAddress',
      stake: 'Balance',
      term: 'BlockNumber'
    },
    Term: 'BlockNumber',
    Unbonding: {
      amount: 'Balance',
      moment: 'BlockNumber'
    }
  })
}, {
  minmax: [1160, undefined],
  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
    AccountInfo: 'AccountInfoWithTripleRefCount',
    AccountInfoWithTripleRefCount: {
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      sufficients: 'RefCount',
      data: 'AccountData'
    }
  })
}];
var _default = versioned;
exports.default = _default;